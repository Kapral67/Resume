name: Public Release Workflow

on:
  push:
    branches:
      - main

jobs:
  publish:
    name: Publish Resume
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[bot]') }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.TOKEN }}
      - uses: baileyjm02/markdown-to-pdf@v1
        with:
          build_pdf: true
          build_html: true
          table_of_contents: false
          input_path: RESUME.md
          output_dir: /
      - uses: actions/upload-artifact@v3
        with:
          name: html
          path: RESUME.html
          if-no-files-found: error
      - uses: actions/upload-artifact@v3
        with:
          name: pdf
          path: RESUME.pdf
          if-no-files-found: error
      - uses: actions/github-script@v6
        name: Delete Previous Release
        continue-on-error: true
        with:
          script: |
            try {
              const { data } = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: 'latest'
              });
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: data.id
              });
            } catch (e) {
              console.log(e);
            }
            try {
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'tags/latest'
              });
            } catch (e) {
              console.log(e);
            }
      - name: Rename Files
        run: |
          mv RESUME.html index.html
          mv RESUME.pdf CSCI_mkapral_12-2023.pdf
      - uses: actions/github-script@v6
        name: Create New Release
        with:
          script: |
            const tag = 'latest';
            const commit = context.sha;
            try {
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${tag}`,
                sha: commit
              });
            } catch (e) {
              console.log(e);
              throw e;
            }
            try {
              const release = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tag,
                name: tag,
                body: 'Latest Public Release',
                draft: true,
                prerelease: true // FIXME: Change to `prerelease: false` when ready to publish
              });
              const fs = require('fs');
              const path = require('path');
              const filename = 'CSCI_mkapral_12-2023.pdf'
              const pdf = fs.readFileSync(path.basename(`./${filename}`));
              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.data.id,
                name: filename,
                data: pdf,
                headers: {
                  'content-length': pdf.length,
                  'content-type': 'application/pdf'
                }
              });
              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.data.id,
                draft: false
              });
            } catch (e) {
              console.log(e);
              throw e;
            }
      - name: Force Commit HTML
        run: |
          git config --local user.name "actions[bot]"
          git config --local user.email "<>"
          git add index.html
          git commit -m "[bot] Auto-Commit Generated HTML Resume"
          git push -f
